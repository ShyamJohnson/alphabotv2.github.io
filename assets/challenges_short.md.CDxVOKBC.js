import{_ as t}from"./chunks/videosh.BUczNqhx.js";import{_ as o,c as a,o as i,ae as n}from"./chunks/framework.Dq8kYo8j.js";const g=JSON.parse('{"title":"Task 10 - Line Maze Solving Alphabot (Shortest Path)","description":"","frontmatter":{},"headers":[],"relativePath":"challenges/short.md","filePath":"challenges/short.md"}'),r={name:"challenges/short.md"};function s(l,e,h,d,p,c){return i(),a("div",null,e[0]||(e[0]=[n('<h1 id="task-10-line-maze-solving-alphabot-shortest-path" tabindex="-1">Task 10 - Line Maze Solving Alphabot (Shortest Path) <a class="header-anchor" href="#task-10-line-maze-solving-alphabot-shortest-path" aria-label="Permalink to &quot;Task 10 - Line Maze Solving Alphabot (Shortest Path)&quot;">​</a></h1><h2 id="task" tabindex="-1">Task <a class="header-anchor" href="#task" aria-label="Permalink to &quot;Task&quot;">​</a></h2><h3 id="finding-the-shortest-path-possible-to-solve-the-maze-using-alphabot" tabindex="-1">Finding The Shortest Path Possible to Solve The Maze Using Alphabot <a class="header-anchor" href="#finding-the-shortest-path-possible-to-solve-the-maze-using-alphabot" aria-label="Permalink to &quot;Finding The Shortest Path Possible to Solve The Maze Using Alphabot&quot;">​</a></h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="functions-to-do" tabindex="-1">Functions To Do <a class="header-anchor" href="#functions-to-do" aria-label="Permalink to &quot;Functions To Do&quot;">​</a></h2><ol><li><strong>Sensor &amp; Movement Logic</strong><ul><li>Read 5 IR sensors to detect the white line and junctions, storing values in an array.</li><li>Calibrate sensors at startup for accurate detection.</li><li>Continuously process sensor values and round for stability.</li><li>Detect junctions (T, L, +, dead ends) using sensor patterns and logic.</li><li>Implement maze-solving logic: record the path taken, optimize it for the shortest route using backtracking and path simplification, and update path memory to avoid unnecessary loops.</li><li>Switch to shortest path replay mode after mapping, following the optimized path memory.</li><li>Stop at the end of the maze or when a goal is detected.</li></ul></li><li><strong>Motor Control</strong><ul><li>Use PID control (proportional, integral, derivative) to follow the line and adjust motor speeds for smooth tracking.</li><li>Use PWM to control left and right motor speeds independently.</li><li>Implement functions for turning left, right, moving forward, and making 180-degree turns using motor direction and speed control.</li><li>Stop motors when needed for precise maneuvers or at the end of the maze.</li></ul></li><li><strong>Path Recording &amp; Optimization</strong><ul><li>Record each movement (L, R, S, B) at junctions into a path array.</li><li>Optimize the path by removing unnecessary loops and dead ends to find the shortest route.</li><li>Replay the optimized path for efficient maze solving.</li></ul></li><li><strong>Feedback &amp; Debugging</strong><ul><li>Print sensor values, path memory, and power difference to the serial monitor for debugging and calibration.</li></ul></li></ol><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h2><div class="video-container"><video controls width="75%"><source src="'+t+'" type="video/mp4"> Your browser doesn&#39;t support HTML5 video. </video></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><p><a href="https://github.com/deepaavudiappan/AlphabotV2/tree/e5715e0cc9439e9033e58b9eef1fa5abf4e590f2/Alphabot%20V2%20-%20Ar/Activities/Maze_Solving_Shortest_Path" target="_blank">Maze_Solving_Shortest_Path</a></p><h6> (Please Go To Main branch)</h6>',12)]))}const f=o(r,[["render",s]]);export{g as __pageData,f as default};
